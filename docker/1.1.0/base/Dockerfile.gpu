# FROM nvidia/cuda:10.1-cudnn7-runtime-ubuntu16.04
# FROM nvidia/cuda:9.0-cudnn7-runtime-ubuntu16.04
FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04

RUN nvcc --version

ARG py_version

# Validate that arguments are specified
RUN test $py_version || exit 1
RUN if [ $py_version -neq 3 ]; then exit 2; fi

# No interactive frontend during docker build
ENV DEBIAN_FRONTEND=noninteractive \
    DEBCONF_NONINTERACTIVE_SEEN=true

# Locale and encoding settings
ENV LANG_WHICH=en \
    LANG_WHERE=US \
    ENCODING=UTF-8
ENV LANGUAGE ${LANG_WHICH}_${LANG_WHERE}.${ENCODING}
ENV LANG="${LANGUAGE}" \
    LC_ALL="${LANGUAGE}"

# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules
# Force stdin, stdout and stderr to be totally unbuffered. Good for logging
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING="${ENCODING}"

RUN apt -qqy update \
  && apt -qqy --no-install-recommends install \
    language-pack-en \
    tzdata \
    locales \
  && locale-gen ${LANGUAGE} \
  && dpkg-reconfigure --frontend noninteractive locales \
  && apt -qyy autoremove \
  && rm -rf /var/lib/apt/lists/* \
  && apt -qyy clean

# Timezone settings
ENV TZ="Europe/Berlin"
RUN echo "Setting time zone to '${TZ}'" \
  && echo "${TZ}" > /etc/timezone \
  && dpkg-reconfigure --frontend noninteractive tzdata

# Install python and nginx
RUN cd /tmp \
 && apt-get update && apt-get install -y --no-install-recommends software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa -y && \
    apt-get update && apt-get install -y --no-install-recommends \
        'build-essential' \
        'curl' \
        'unzip' \
        'jq' \
        'libsm6' \
        'libxext6' \
        'libxrender-dev' \
        'nginx' \
  && apt -qyy remove \
        'python3.5' \
        'python3.5-minimal' \
        'libpython3.5-minimal' \
        'libpython3.5-stdlib' \
  && apt -qyy install --no-install-recommends \
        'python3.7-dev' \
  && apt -qqy autoremove \
  && ln -s -f /usr/bin/python3.7 /usr/bin/python \
  && python --version \
  && python --version 2>&1 | grep "3\.7\.3" \
  && nvcc --version \
  && curl -O "https://bootstrap.pypa.io/get-pip.py" \
  && python get-pip.py 'pip<=18.1' \
  && rm get-pip.py \
  && ln -s -f /usr/local/bin/pip /usr/bin/pip \
  && ls -lah --color='always' /usr/bin/pip* \
  && pip --version \
  && pip --version 2>&1 | grep "python 3\.7" \
  && pip install --no-cache-dir \
        'torch==1.1.0' \
        'torchvision==0.2.2' \
        'Pillow==6.0.0' \
        'retrying==1.3.3' \
        'six==1.12.0' \
        'fastai==1.0.52' \
        'opencv-python>=4.0,<4.1' \
  && python -c 'import torch' \
  # Apex is NVIDIA-maintained utilities to streamline
  # mixed precision and distributed training in Pytorch
  # https://github.com/nvidia/apex
  && cd /tmp \
  && python --version \
  && python --version 2>&1 | grep "3\.7\.3" \
  && pip --version \
  && pip --version 2>&1 | grep "python 3\.7" \
  && nvcc --version \
  && _apex_commit="39e153a3159724432257a8fc118807b359f4d1c8" \
  && curl -L -O "https://github.com/NVIDIA/apex/archive/${_apex_commit}.zip" \
  && unzip -x "${_apex_commit}.zip" \
  && cd "apex-${_apex_commit}" \
  && pip install -v \
        --no-cache-dir \
        --global-option="--cpp_ext" \
        --global-option="--cuda_ext" . \
  && cd /tmp \
  && rm -rf apex* \
  && apt -qqy autoremove \
  && rm -rf /var/lib/apt/lists/* \
  && echo "Final check that everything is still there" \
  && python --version \
  && python --version 2>&1 | grep "3\.7\.3" \
  && pip --version \
  && pip --version 2>&1 | grep "python 3\.7" \
  && nvcc --version \
